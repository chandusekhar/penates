//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Penates.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PenatesEntities : DbContext
    {
        public PenatesEntities()
            : base("name=PenatesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Box> Boxes { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<CommercialAgreement> CommercialAgreements { get; set; }
        public virtual DbSet<Container> Containers { get; set; }
        public virtual DbSet<ContainerType> ContainerTypes { get; set; }
        public virtual DbSet<Deposit> Deposits { get; set; }
        public virtual DbSet<DistributionCenter> DistributionCenters { get; set; }
        public virtual DbSet<Hall> Halls { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
        public virtual DbSet<ItemsState> ItemsStates { get; set; }
        public virtual DbSet<NotificationType> NotificationTypes { get; set; }
        public virtual DbSet<Pack> Packs { get; set; }
        public virtual DbSet<Policy> Policies { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ReceivedProduct> ReceivedProducts { get; set; }
        public virtual DbSet<Reception> Receptions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<Sector> Sectors { get; set; }
        public virtual DbSet<Shelf> Shelfs { get; set; }
        public virtual DbSet<Stock_Invented> Stock_Invented { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<TemporaryDeposit> TemporaryDeposits { get; set; }
        public virtual DbSet<Transfer> Transfers { get; set; }
        public virtual DbSet<ShelfsSubdivision> ShelfsSubdivisions { get; set; }
        public virtual DbSet<ProvidedBy> ProvidedBies { get; set; }
        public virtual DbSet<ID> IDs { get; set; }
        public virtual DbSet<SupplierOrder> SupplierOrders { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Rack> Racks { get; set; }
        public virtual DbSet<SupplierOrderItem> SupplierOrderItems { get; set; }
        public virtual DbSet<CartItem> CartItems { get; set; }
        public virtual DbSet<OrdersValueSecurity> OrdersValueSecurities { get; set; }
        public virtual DbSet<ProductsValueSecurity> ProductsValueSecurities { get; set; }
    
        public virtual ObjectResult<Nullable<long>> SP_Product_Add(string barcode, string name, Nullable<decimal> sellPrice, Nullable<decimal> depth, Nullable<decimal> width, Nullable<decimal> height, Nullable<long> category, string description, byte[] image, Nullable<long> minStock, Nullable<bool> isBasic)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sellPriceParameter = sellPrice.HasValue ?
                new ObjectParameter("SellPrice", sellPrice) :
                new ObjectParameter("SellPrice", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var minStockParameter = minStock.HasValue ?
                new ObjectParameter("MinStock", minStock) :
                new ObjectParameter("MinStock", typeof(long));
    
            var isBasicParameter = isBasic.HasValue ?
                new ObjectParameter("IsBasic", isBasic) :
                new ObjectParameter("IsBasic", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Product_Add", barcodeParameter, nameParameter, sellPriceParameter, depthParameter, widthParameter, heightParameter, categoryParameter, descriptionParameter, imageParameter, minStockParameter, isBasicParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Product_Save(string barcode, string name, Nullable<decimal> sellPrice, Nullable<decimal> depth, Nullable<decimal> width, Nullable<decimal> height, Nullable<long> category, string description, byte[] image, Nullable<long> minStock, Nullable<bool> isBasic, Nullable<long> productID)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sellPriceParameter = sellPrice.HasValue ?
                new ObjectParameter("SellPrice", sellPrice) :
                new ObjectParameter("SellPrice", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var minStockParameter = minStock.HasValue ?
                new ObjectParameter("MinStock", minStock) :
                new ObjectParameter("MinStock", typeof(long));
    
            var isBasicParameter = isBasic.HasValue ?
                new ObjectParameter("IsBasic", isBasic) :
                new ObjectParameter("IsBasic", typeof(bool));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Product_Save", barcodeParameter, nameParameter, sellPriceParameter, depthParameter, widthParameter, heightParameter, categoryParameter, descriptionParameter, imageParameter, minStockParameter, isBasicParameter, productIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_ProductCategories_Add(string description)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_ProductCategories_Add", descriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_ProductCategories_Save(string description, Nullable<long> categoryID)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_ProductCategories_Save", descriptionParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Supplier_Add(string address, string email, string name, string phone)
        {
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Supplier_Add", addressParameter, emailParameter, nameParameter, phoneParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Supplier_Edit(Nullable<long> iD, string address, string email, string name, string phone)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Supplier_Edit", iDParameter, addressParameter, emailParameter, nameParameter, phoneParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_InternalDistributionCenter_Edit(Nullable<long> iD, Nullable<int> floors, Nullable<long> iDCity, string address, Nullable<decimal> width, Nullable<decimal> height, Nullable<decimal> depth, string telephone)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var floorsParameter = floors.HasValue ?
                new ObjectParameter("Floors", floors) :
                new ObjectParameter("Floors", typeof(int));
    
            var iDCityParameter = iDCity.HasValue ?
                new ObjectParameter("IDCity", iDCity) :
                new ObjectParameter("IDCity", typeof(long));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_InternalDistributionCenter_Edit", iDParameter, floorsParameter, iDCityParameter, addressParameter, widthParameter, heightParameter, depthParameter, telephoneParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_ExternalDistributionCenter_Add(Nullable<long> iDCity, Nullable<decimal> usableSpace, string address, string telephone, string telephone2, string contact, Nullable<bool> hasMaxCapacity)
        {
            var iDCityParameter = iDCity.HasValue ?
                new ObjectParameter("IDCity", iDCity) :
                new ObjectParameter("IDCity", typeof(long));
    
            var usableSpaceParameter = usableSpace.HasValue ?
                new ObjectParameter("UsableSpace", usableSpace) :
                new ObjectParameter("UsableSpace", typeof(decimal));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var hasMaxCapacityParameter = hasMaxCapacity.HasValue ?
                new ObjectParameter("HasMaxCapacity", hasMaxCapacity) :
                new ObjectParameter("HasMaxCapacity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_ExternalDistributionCenter_Add", iDCityParameter, usableSpaceParameter, addressParameter, telephoneParameter, telephone2Parameter, contactParameter, hasMaxCapacityParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_ExternalDistributionCenter_Edit(Nullable<long> iD, Nullable<long> iDCity, Nullable<decimal> usableSpace, string address, string telephone, string telephone2, string contact, Nullable<bool> hasMaxCapacity)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var iDCityParameter = iDCity.HasValue ?
                new ObjectParameter("IDCity", iDCity) :
                new ObjectParameter("IDCity", typeof(long));
    
            var usableSpaceParameter = usableSpace.HasValue ?
                new ObjectParameter("UsableSpace", usableSpace) :
                new ObjectParameter("UsableSpace", typeof(decimal));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var hasMaxCapacityParameter = hasMaxCapacity.HasValue ?
                new ObjectParameter("HasMaxCapacity", hasMaxCapacity) :
                new ObjectParameter("HasMaxCapacity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_ExternalDistributionCenter_Edit", iDParameter, iDCityParameter, usableSpaceParameter, addressParameter, telephoneParameter, telephone2Parameter, contactParameter, hasMaxCapacityParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Product_Delete(Nullable<long> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Product_Delete", productIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Supplier_Delete(Nullable<long> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Supplier_Delete", supplierIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_SupplierOrder_Add(string orderID, Nullable<long> supplierID, Nullable<System.DateTime> orderDate)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_SupplierOrder_Add", orderIDParameter, supplierIDParameter, orderDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_SupplierOrder_Save(string oldID, Nullable<long> oldSupplierID, string iD, Nullable<long> supplierID, Nullable<System.DateTime> orderDate)
        {
            var oldIDParameter = oldID != null ?
                new ObjectParameter("OldID", oldID) :
                new ObjectParameter("OldID", typeof(string));
    
            var oldSupplierIDParameter = oldSupplierID.HasValue ?
                new ObjectParameter("OldSupplierID", oldSupplierID) :
                new ObjectParameter("OldSupplierID", typeof(long));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_SupplierOrder_Save", oldIDParameter, oldSupplierIDParameter, iDParameter, supplierIDParameter, orderDateParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_InternalDistributionCenter_Add(Nullable<int> floors, Nullable<long> iDCity, string address, Nullable<decimal> width, Nullable<decimal> height, Nullable<decimal> depth, string telephone)
        {
            var floorsParameter = floors.HasValue ?
                new ObjectParameter("Floors", floors) :
                new ObjectParameter("Floors", typeof(int));
    
            var iDCityParameter = iDCity.HasValue ?
                new ObjectParameter("IDCity", iDCity) :
                new ObjectParameter("IDCity", typeof(long));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_InternalDistributionCenter_Add", floorsParameter, iDCityParameter, addressParameter, widthParameter, heightParameter, depthParameter, telephoneParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Notification_Add(Nullable<System.DateTime> date, Nullable<long> notificationTypeID, Nullable<long> distributionCenterID, Nullable<long> policyID, string message)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var notificationTypeIDParameter = notificationTypeID.HasValue ?
                new ObjectParameter("NotificationTypeID", notificationTypeID) :
                new ObjectParameter("NotificationTypeID", typeof(long));
    
            var distributionCenterIDParameter = distributionCenterID.HasValue ?
                new ObjectParameter("DistributionCenterID", distributionCenterID) :
                new ObjectParameter("DistributionCenterID", typeof(long));
    
            var policyIDParameter = policyID.HasValue ?
                new ObjectParameter("PolicyID", policyID) :
                new ObjectParameter("PolicyID", typeof(long));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Notification_Add", dateParameter, notificationTypeIDParameter, distributionCenterIDParameter, policyIDParameter, messageParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_ExternalDCCapacity_Edit(Nullable<long> iD, Nullable<long> iDCity, Nullable<decimal> usableSpace, string address, string telephone, string telephone2, string contact, Nullable<bool> hasMaxCapacity, Nullable<decimal> usableFreeSpace)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var iDCityParameter = iDCity.HasValue ?
                new ObjectParameter("IDCity", iDCity) :
                new ObjectParameter("IDCity", typeof(long));
    
            var usableSpaceParameter = usableSpace.HasValue ?
                new ObjectParameter("UsableSpace", usableSpace) :
                new ObjectParameter("UsableSpace", typeof(decimal));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var hasMaxCapacityParameter = hasMaxCapacity.HasValue ?
                new ObjectParameter("HasMaxCapacity", hasMaxCapacity) :
                new ObjectParameter("HasMaxCapacity", typeof(bool));
    
            var usableFreeSpaceParameter = usableFreeSpace.HasValue ?
                new ObjectParameter("UsableFreeSpace", usableFreeSpace) :
                new ObjectParameter("UsableFreeSpace", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_ExternalDCCapacity_Edit", iDParameter, iDCityParameter, usableSpaceParameter, addressParameter, telephoneParameter, telephone2Parameter, contactParameter, hasMaxCapacityParameter, usableFreeSpaceParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_TemporaryDeposit_Add(string description, Nullable<decimal> height, Nullable<decimal> width, Nullable<decimal> depth, Nullable<long> iDDistributionCenter, Nullable<int> floor)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var iDDistributionCenterParameter = iDDistributionCenter.HasValue ?
                new ObjectParameter("IDDistributionCenter", iDDistributionCenter) :
                new ObjectParameter("IDDistributionCenter", typeof(long));
    
            var floorParameter = floor.HasValue ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_TemporaryDeposit_Add", descriptionParameter, heightParameter, widthParameter, depthParameter, iDDistributionCenterParameter, floorParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_TemporaryDeposit_Edit(Nullable<long> iD, string description, Nullable<decimal> height, Nullable<decimal> width, Nullable<decimal> depth, Nullable<int> floor)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var floorParameter = floor.HasValue ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_TemporaryDeposit_Edit", iDParameter, descriptionParameter, heightParameter, widthParameter, depthParameter, floorParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Deposit_Add(string description, Nullable<decimal> height, Nullable<decimal> width, Nullable<decimal> depth, Nullable<long> iDDistributionCenter, Nullable<int> floor)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var iDDistributionCenterParameter = iDDistributionCenter.HasValue ?
                new ObjectParameter("IDDistributionCenter", iDDistributionCenter) :
                new ObjectParameter("IDDistributionCenter", typeof(long));
    
            var floorParameter = floor.HasValue ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Deposit_Add", descriptionParameter, heightParameter, widthParameter, depthParameter, iDDistributionCenterParameter, floorParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Deposit_Edit(Nullable<long> iD, string description, Nullable<decimal> height, Nullable<decimal> width, Nullable<decimal> depth, Nullable<int> floor)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var floorParameter = floor.HasValue ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Deposit_Edit", iDParameter, descriptionParameter, heightParameter, widthParameter, depthParameter, floorParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Sector_Add(string description, Nullable<decimal> width, Nullable<decimal> depth, Nullable<long> iDDeposit)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var iDDepositParameter = iDDeposit.HasValue ?
                new ObjectParameter("IDDeposit", iDDeposit) :
                new ObjectParameter("IDDeposit", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Sector_Add", descriptionParameter, widthParameter, depthParameter, iDDepositParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Sector_Edit(Nullable<long> iD, string description, Nullable<decimal> width, Nullable<decimal> depth)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Sector_Edit", iDParameter, descriptionParameter, widthParameter, depthParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Hall_Add(string description, Nullable<decimal> width, Nullable<decimal> depth, Nullable<long> iDSector)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var iDSectorParameter = iDSector.HasValue ?
                new ObjectParameter("IDSector", iDSector) :
                new ObjectParameter("IDSector", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Hall_Add", descriptionParameter, widthParameter, depthParameter, iDSectorParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Hall_Edit(Nullable<long> iD, string description, Nullable<decimal> width, Nullable<decimal> depth)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Hall_Edit", iDParameter, descriptionParameter, widthParameter, depthParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_ContainerType_Add(string description, Nullable<decimal> height, Nullable<decimal> width, Nullable<decimal> depth)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_ContainerType_Add", descriptionParameter, heightParameter, widthParameter, depthParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_ContainerType_Edit(Nullable<long> iD, string description, Nullable<decimal> height, Nullable<decimal> width, Nullable<decimal> depth)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_ContainerType_Edit", iDParameter, descriptionParameter, heightParameter, widthParameter, depthParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Rack_Add(string description, Nullable<decimal> height, Nullable<decimal> width, Nullable<decimal> depth, Nullable<long> hallID, string rackCode, Nullable<int> shelves, Nullable<int> subdiv)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var hallIDParameter = hallID.HasValue ?
                new ObjectParameter("HallID", hallID) :
                new ObjectParameter("HallID", typeof(long));
    
            var rackCodeParameter = rackCode != null ?
                new ObjectParameter("RackCode", rackCode) :
                new ObjectParameter("RackCode", typeof(string));
    
            var shelvesParameter = shelves.HasValue ?
                new ObjectParameter("Shelves", shelves) :
                new ObjectParameter("Shelves", typeof(int));
    
            var subdivParameter = subdiv.HasValue ?
                new ObjectParameter("Subdiv", subdiv) :
                new ObjectParameter("Subdiv", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Rack_Add", descriptionParameter, heightParameter, widthParameter, depthParameter, hallIDParameter, rackCodeParameter, shelvesParameter, subdivParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Rack_Edit(Nullable<long> iD, string description, Nullable<decimal> height, Nullable<decimal> width, Nullable<decimal> depth, Nullable<long> hallID, string rackCode, Nullable<int> shelves, Nullable<int> subdiv)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var hallIDParameter = hallID.HasValue ?
                new ObjectParameter("HallID", hallID) :
                new ObjectParameter("HallID", typeof(long));
    
            var rackCodeParameter = rackCode != null ?
                new ObjectParameter("RackCode", rackCode) :
                new ObjectParameter("RackCode", typeof(string));
    
            var shelvesParameter = shelves.HasValue ?
                new ObjectParameter("Shelves", shelves) :
                new ObjectParameter("Shelves", typeof(int));
    
            var subdivParameter = subdiv.HasValue ?
                new ObjectParameter("Subdiv", subdiv) :
                new ObjectParameter("Subdiv", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Rack_Edit", iDParameter, descriptionParameter, heightParameter, widthParameter, depthParameter, hallIDParameter, rackCodeParameter, shelvesParameter, subdivParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Set_UsableSpace(Nullable<decimal> size, Nullable<long> hallID)
        {
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(decimal));
    
            var hallIDParameter = hallID.HasValue ?
                new ObjectParameter("HallID", hallID) :
                new ObjectParameter("HallID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Set_UsableSpace", sizeParameter, hallIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Shelf_Add(Nullable<int> shelfNumber, Nullable<decimal> height, Nullable<decimal> size, Nullable<long> rackID, Nullable<int> subdivitions, Nullable<decimal> width, Nullable<decimal> depth)
        {
            var shelfNumberParameter = shelfNumber.HasValue ?
                new ObjectParameter("ShelfNumber", shelfNumber) :
                new ObjectParameter("ShelfNumber", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(decimal));
    
            var rackIDParameter = rackID.HasValue ?
                new ObjectParameter("RackID", rackID) :
                new ObjectParameter("RackID", typeof(long));
    
            var subdivitionsParameter = subdivitions.HasValue ?
                new ObjectParameter("Subdivitions", subdivitions) :
                new ObjectParameter("Subdivitions", typeof(int));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Shelf_Add", shelfNumberParameter, heightParameter, sizeParameter, rackIDParameter, subdivitionsParameter, widthParameter, depthParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_ShelfSubdivition_Add(string divitionCode, Nullable<decimal> width, Nullable<decimal> size, Nullable<long> shelfID)
        {
            var divitionCodeParameter = divitionCode != null ?
                new ObjectParameter("DivitionCode", divitionCode) :
                new ObjectParameter("DivitionCode", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(decimal));
    
            var shelfIDParameter = shelfID.HasValue ?
                new ObjectParameter("ShelfID", shelfID) :
                new ObjectParameter("ShelfID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_ShelfSubdivition_Add", divitionCodeParameter, widthParameter, sizeParameter, shelfIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Container_Add(string code, Nullable<long> typeID, Nullable<long> temporaryDepositID, Nullable<long> shelfSubdivitionID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(long));
    
            var temporaryDepositIDParameter = temporaryDepositID.HasValue ?
                new ObjectParameter("TemporaryDepositID", temporaryDepositID) :
                new ObjectParameter("TemporaryDepositID", typeof(long));
    
            var shelfSubdivitionIDParameter = shelfSubdivitionID.HasValue ?
                new ObjectParameter("ShelfSubdivitionID", shelfSubdivitionID) :
                new ObjectParameter("ShelfSubdivitionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Container_Add", codeParameter, typeIDParameter, temporaryDepositIDParameter, shelfSubdivitionIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Container_Edit(string code, Nullable<long> typeID, Nullable<long> temporaryDepositID, Nullable<long> shelfSubdivitionID, Nullable<long> iD)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(long));
    
            var temporaryDepositIDParameter = temporaryDepositID.HasValue ?
                new ObjectParameter("TemporaryDepositID", temporaryDepositID) :
                new ObjectParameter("TemporaryDepositID", typeof(long));
    
            var shelfSubdivitionIDParameter = shelfSubdivitionID.HasValue ?
                new ObjectParameter("ShelfSubdivitionID", shelfSubdivitionID) :
                new ObjectParameter("ShelfSubdivitionID", typeof(long));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Container_Edit", codeParameter, typeIDParameter, temporaryDepositIDParameter, shelfSubdivitionIDParameter, iDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Rack_LightEdit(Nullable<long> iD, string description, string rackCode)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var rackCodeParameter = rackCode != null ?
                new ObjectParameter("RackCode", rackCode) :
                new ObjectParameter("RackCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Rack_LightEdit", iDParameter, descriptionParameter, rackCodeParameter);
        }
    
        public virtual int SP_Remove_UsableSpace(Nullable<decimal> size, Nullable<long> hallID)
        {
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(decimal));
    
            var hallIDParameter = hallID.HasValue ?
                new ObjectParameter("HallID", hallID) :
                new ObjectParameter("HallID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Remove_UsableSpace", sizeParameter, hallIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Box_Edit(Nullable<long> iD, Nullable<bool> isWaste, Nullable<bool> reevaluate, Nullable<bool> reserved, Nullable<bool> transit, Nullable<long> statusID, Nullable<long> packID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var isWasteParameter = isWaste.HasValue ?
                new ObjectParameter("IsWaste", isWaste) :
                new ObjectParameter("IsWaste", typeof(bool));
    
            var reevaluateParameter = reevaluate.HasValue ?
                new ObjectParameter("Reevaluate", reevaluate) :
                new ObjectParameter("Reevaluate", typeof(bool));
    
            var reservedParameter = reserved.HasValue ?
                new ObjectParameter("Reserved", reserved) :
                new ObjectParameter("Reserved", typeof(bool));
    
            var transitParameter = transit.HasValue ?
                new ObjectParameter("Transit", transit) :
                new ObjectParameter("Transit", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(long));
    
            var packIDParameter = packID.HasValue ?
                new ObjectParameter("PackID", packID) :
                new ObjectParameter("PackID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Box_Edit", iDParameter, isWasteParameter, reevaluateParameter, reservedParameter, transitParameter, statusIDParameter, packIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_ItemState_Add(string description)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_ItemState_Add", descriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_ItemState_Edit(Nullable<long> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_ItemState_Edit", iDParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Pack_Add(string description, Nullable<System.DateTime> expirationDate, string serialNumber)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Pack_Add", descriptionParameter, expirationDateParameter, serialNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Pack_Edit(Nullable<long> iD, string description, Nullable<System.DateTime> expirationDate, string serialNumber)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Pack_Edit", iDParameter, descriptionParameter, expirationDateParameter, serialNumberParameter);
        }
    
        public virtual int fromCm3ToM3(ObjectParameter size)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fromCm3ToM3", size);
        }
    
        public virtual int fromM3ToCm3(ObjectParameter size)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fromM3ToCm3", size);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Reception_Add(Nullable<System.DateTime> receivingDate, string orderID, Nullable<long> supplierID, Nullable<long> distributionCenterID, string cOT, Nullable<bool> isPurchase)
        {
            var receivingDateParameter = receivingDate.HasValue ?
                new ObjectParameter("ReceivingDate", receivingDate) :
                new ObjectParameter("ReceivingDate", typeof(System.DateTime));
    
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            var distributionCenterIDParameter = distributionCenterID.HasValue ?
                new ObjectParameter("DistributionCenterID", distributionCenterID) :
                new ObjectParameter("DistributionCenterID", typeof(long));
    
            var cOTParameter = cOT != null ?
                new ObjectParameter("COT", cOT) :
                new ObjectParameter("COT", typeof(string));
    
            var isPurchaseParameter = isPurchase.HasValue ?
                new ObjectParameter("IsPurchase", isPurchase) :
                new ObjectParameter("IsPurchase", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Reception_Add", receivingDateParameter, orderIDParameter, supplierIDParameter, distributionCenterIDParameter, cOTParameter, isPurchaseParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Client_Add(string email, string phone, string address, string name, string contactName, string cUIT, Nullable<long> city)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var cUITParameter = cUIT != null ?
                new ObjectParameter("CUIT", cUIT) :
                new ObjectParameter("CUIT", typeof(string));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Client_Add", emailParameter, phoneParameter, addressParameter, nameParameter, contactNameParameter, cUITParameter, cityParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Client_Edit(Nullable<long> iD, string email, string phone, string address, string name, string contactName, string cUIT, Nullable<long> city)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var cUITParameter = cUIT != null ?
                new ObjectParameter("CUIT", cUIT) :
                new ObjectParameter("CUIT", typeof(string));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Client_Edit", iDParameter, emailParameter, phoneParameter, addressParameter, nameParameter, contactNameParameter, cUITParameter, cityParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Sales_Add(Nullable<System.DateTime> saleDate, Nullable<long> iDDistributionCenter, Nullable<long> iDClient, Nullable<bool> isIncome, string cOT, string billNumber)
        {
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("SaleDate", saleDate) :
                new ObjectParameter("SaleDate", typeof(System.DateTime));
    
            var iDDistributionCenterParameter = iDDistributionCenter.HasValue ?
                new ObjectParameter("IDDistributionCenter", iDDistributionCenter) :
                new ObjectParameter("IDDistributionCenter", typeof(long));
    
            var iDClientParameter = iDClient.HasValue ?
                new ObjectParameter("IDClient", iDClient) :
                new ObjectParameter("IDClient", typeof(long));
    
            var isIncomeParameter = isIncome.HasValue ?
                new ObjectParameter("IsIncome", isIncome) :
                new ObjectParameter("IsIncome", typeof(bool));
    
            var cOTParameter = cOT != null ?
                new ObjectParameter("COT", cOT) :
                new ObjectParameter("COT", typeof(string));
    
            var billNumberParameter = billNumber != null ?
                new ObjectParameter("BillNumber", billNumber) :
                new ObjectParameter("BillNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Sales_Add", saleDateParameter, iDDistributionCenterParameter, iDClientParameter, isIncomeParameter, cOTParameter, billNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Sales_Edit(Nullable<long> iD, Nullable<System.DateTime> saleDate, Nullable<long> iDClient, Nullable<bool> isIncome, string cOT, string billNumber)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("SaleDate", saleDate) :
                new ObjectParameter("SaleDate", typeof(System.DateTime));
    
            var iDClientParameter = iDClient.HasValue ?
                new ObjectParameter("IDClient", iDClient) :
                new ObjectParameter("IDClient", typeof(long));
    
            var isIncomeParameter = isIncome.HasValue ?
                new ObjectParameter("IsIncome", isIncome) :
                new ObjectParameter("IsIncome", typeof(bool));
    
            var cOTParameter = cOT != null ?
                new ObjectParameter("COT", cOT) :
                new ObjectParameter("COT", typeof(string));
    
            var billNumberParameter = billNumber != null ?
                new ObjectParameter("BillNumber", billNumber) :
                new ObjectParameter("BillNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Sales_Edit", iDParameter, saleDateParameter, iDClientParameter, isIncomeParameter, cOTParameter, billNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Transfer_Add(Nullable<System.DateTime> transferDate, Nullable<long> senderID, Nullable<long> recieverID, Nullable<System.DateTime> arrivalDate, string cOT)
        {
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(long));
    
            var recieverIDParameter = recieverID.HasValue ?
                new ObjectParameter("RecieverID", recieverID) :
                new ObjectParameter("RecieverID", typeof(long));
    
            var arrivalDateParameter = arrivalDate.HasValue ?
                new ObjectParameter("ArrivalDate", arrivalDate) :
                new ObjectParameter("ArrivalDate", typeof(System.DateTime));
    
            var cOTParameter = cOT != null ?
                new ObjectParameter("COT", cOT) :
                new ObjectParameter("COT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Transfer_Add", transferDateParameter, senderIDParameter, recieverIDParameter, arrivalDateParameter, cOTParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_Transfer_Edit(Nullable<long> iD, Nullable<System.DateTime> transferDate, Nullable<System.DateTime> arrivalDate, string cOT)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var arrivalDateParameter = arrivalDate.HasValue ?
                new ObjectParameter("ArrivalDate", arrivalDate) :
                new ObjectParameter("ArrivalDate", typeof(System.DateTime));
    
            var cOTParameter = cOT != null ?
                new ObjectParameter("COT", cOT) :
                new ObjectParameter("COT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_Transfer_Edit", iDParameter, transferDateParameter, arrivalDateParameter, cOTParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_ExternalBox_Add(Nullable<bool> reserved, Nullable<bool> transit, Nullable<long> productID, Nullable<System.DateTime> adquisitionDate, Nullable<long> quantity, Nullable<decimal> buyerCost, Nullable<long> externalDC, Nullable<long> statusID, Nullable<long> packID, Nullable<decimal> depth, Nullable<decimal> width, Nullable<decimal> height)
        {
            var reservedParameter = reserved.HasValue ?
                new ObjectParameter("Reserved", reserved) :
                new ObjectParameter("Reserved", typeof(bool));
    
            var transitParameter = transit.HasValue ?
                new ObjectParameter("Transit", transit) :
                new ObjectParameter("Transit", typeof(bool));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(long));
    
            var adquisitionDateParameter = adquisitionDate.HasValue ?
                new ObjectParameter("AdquisitionDate", adquisitionDate) :
                new ObjectParameter("AdquisitionDate", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(long));
    
            var buyerCostParameter = buyerCost.HasValue ?
                new ObjectParameter("BuyerCost", buyerCost) :
                new ObjectParameter("BuyerCost", typeof(decimal));
    
            var externalDCParameter = externalDC.HasValue ?
                new ObjectParameter("ExternalDC", externalDC) :
                new ObjectParameter("ExternalDC", typeof(long));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(long));
    
            var packIDParameter = packID.HasValue ?
                new ObjectParameter("PackID", packID) :
                new ObjectParameter("PackID", typeof(long));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_ExternalBox_Add", reservedParameter, transitParameter, productIDParameter, adquisitionDateParameter, quantityParameter, buyerCostParameter, externalDCParameter, statusIDParameter, packIDParameter, depthParameter, widthParameter, heightParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_InternalBox_Add(Nullable<bool> reserved, Nullable<bool> transit, Nullable<long> productID, Nullable<System.DateTime> adquisitionDate, Nullable<long> quantity, Nullable<decimal> buyerCost, Nullable<long> containerID, Nullable<long> statusID, Nullable<long> packID, Nullable<decimal> depth, Nullable<decimal> width, Nullable<decimal> height)
        {
            var reservedParameter = reserved.HasValue ?
                new ObjectParameter("Reserved", reserved) :
                new ObjectParameter("Reserved", typeof(bool));
    
            var transitParameter = transit.HasValue ?
                new ObjectParameter("Transit", transit) :
                new ObjectParameter("Transit", typeof(bool));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(long));
    
            var adquisitionDateParameter = adquisitionDate.HasValue ?
                new ObjectParameter("AdquisitionDate", adquisitionDate) :
                new ObjectParameter("AdquisitionDate", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(long));
    
            var buyerCostParameter = buyerCost.HasValue ?
                new ObjectParameter("BuyerCost", buyerCost) :
                new ObjectParameter("BuyerCost", typeof(decimal));
    
            var containerIDParameter = containerID.HasValue ?
                new ObjectParameter("ContainerID", containerID) :
                new ObjectParameter("ContainerID", typeof(long));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(long));
    
            var packIDParameter = packID.HasValue ?
                new ObjectParameter("PackID", packID) :
                new ObjectParameter("PackID", typeof(long));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_InternalBox_Add", reservedParameter, transitParameter, productIDParameter, adquisitionDateParameter, quantityParameter, buyerCostParameter, containerIDParameter, statusIDParameter, packIDParameter, depthParameter, widthParameter, heightParameter);
        }
    
        public virtual int SP_AutoDeleteCartItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AutoDeleteCartItems");
        }
    }
}
