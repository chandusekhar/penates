<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BarcodeLength" xml:space="preserve">
    <value>The Barcode should be less than 128 characters long</value>
  </data>
  <data name="BarcodeRequired" xml:space="preserve">
    <value>You need to enter the Barcode in order to continue</value>
  </data>
  <data name="CurrencyTypeError" xml:space="preserve">
    <value>The {0} should have a currency format</value>
  </data>
  <data name="DateTypeError" xml:space="preserve">
    <value>The {0} should have a Date Value</value>
  </data>
  <data name="DescriptionLength" xml:space="preserve">
    <value>The description should only be {1} long</value>
  </data>
  <data name="DescriptionType" xml:space="preserve">
    <value>The Description should be a text value</value>
  </data>
  <data name="DimentionTooBig" xml:space="preserve">
    <value>{0} is too big. It should be less than {1}</value>
  </data>
  <data name="DistributionCenterRequired" xml:space="preserve">
    <value>You need to enter the Distribution Center in order to continue</value>
  </data>
  <data name="DistributionCenterValid" xml:space="preserve">
    <value>You need to enter a valid Distribution Center in order to continue</value>
  </data>
  <data name="EmailError" xml:space="preserve">
    <value>The {0} should be a valid email address</value>
  </data>
  <data name="ExtensionError" xml:space="preserve">
    <value>The file's extension for {0} should be of one of the following: {1}</value>
  </data>
  <data name="FloorTooBig" xml:space="preserve">
    <value>The Floor Number is to big. {0} only has {1} floors.</value>
  </data>
  <data name="GraterOrEqualThanError" xml:space="preserve">
    <value>The {0} should be a value grater or equal to {1}</value>
  </data>
  <data name="GraterThanError" xml:space="preserve">
    <value>The {0} should be a value grater than {1}</value>
  </data>
  <data name="ImageSizeError" xml:space="preserve">
    <value>The {0} you entered is too large, it should be less than 4Mb</value>
  </data>
  <data name="IntegerError" xml:space="preserve">
    <value>The {0} should be an integer number</value>
  </data>
  <data name="InvalidCharacters" xml:space="preserve">
    <value>Invalid characters. {0} should only have {1}</value>
  </data>
  <data name="IvalidUsername" xml:space="preserve">
    <value>Invalid {0}, please choose a diferent username</value>
  </data>
  <data name="LenghtError" xml:space="preserve">
    <value>The length of {0} should be less or equal than {1}</value>
  </data>
  <data name="MinLengthError" xml:space="preserve">
    <value>The lenght of the {0} should be at least {1} characters long</value>
  </data>
  <data name="MinMaxLenghtError" xml:space="preserve">
    <value>The length of {0} should be less or equal than {1} and grater or equal than {2}</value>
  </data>
  <data name="NameLength" xml:space="preserve">
    <value>The Name should be less than 128 characters long</value>
  </data>
  <data name="NameRequired" xml:space="preserve">
    <value>You need to enter the Name in order to continue</value>
  </data>
  <data name="NumericTypeError" xml:space="preserve">
    <value>The {0} should have a numeric value</value>
  </data>
  <data name="PasswordErrorMessage" xml:space="preserve">
    <value>{0} should be at least {1} lenght long and have a maximum of {2} characters. It should also have at least {3} lowercase letters, {4} uppercase, {5} digits and {6} symbols</value>
  </data>
  <data name="PasswordPolicyError" xml:space="preserve">
    <value>The password should contain at least 1 upper case character and at least one number or symbol character.</value>
  </data>
  <data name="PasswordSameAsOld" xml:space="preserve">
    <value>The new and old passwords should not be the same</value>
  </data>
  <data name="PasswordSameAsUser" xml:space="preserve">
    <value>The password should differ from the username</value>
  </data>
  <data name="PasswordsDontMatch" xml:space="preserve">
    <value>The password and confirmation password do not match</value>
  </data>
  <data name="PhoneError" xml:space="preserve">
    <value>The {0} should be a valid phone number</value>
  </data>
  <data name="ProductIDRange" xml:space="preserve">
    <value>You should enter a valid Id number (Numerica and grater than 0)</value>
  </data>
  <data name="ProductIDRequired" xml:space="preserve">
    <value>You need to enter the Porduct ID in order to continue</value>
  </data>
  <data name="RangeError" xml:space="preserve">
    <value>The {0} should be a value between {1} and {2}</value>
  </data>
  <data name="RequiredError" xml:space="preserve">
    <value>You need to enter the {0} in order to continue</value>
  </data>
  <data name="SellerPriceRequired" xml:space="preserve">
    <value>You need to enter the Seller's Price in order to continue</value>
  </data>
  <data name="SellerPriceTypeError" xml:space="preserve">
    <value>You should enter a numeric value as the Seller's Price</value>
  </data>
  <data name="StringLenghtError" xml:space="preserve">
    <value>The {0} should only be {1} long</value>
  </data>
  <data name="TextTypeError" xml:space="preserve">
    <value>The {0} should have a text value</value>
  </data>
</root>